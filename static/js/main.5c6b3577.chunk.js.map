{"version":3,"sources":["App.js","index.js"],"names":["App","useState","lists","setLists","input","setInput","filterOption","setFilterOption","isEdit","setIsEdit","isSearch","setIsSearch","isAdd","setIsAdd","isEditId","setEditId","addIndex","setAddIndex","className","value","onChange","event","target","newArray","sort","a","b","time","task","length","type","placeholder","onClick","map","item","id","Date","addArray","splice","getTime","toString","newTask","uuidv4","status","submitHandler","filter","includes","index","checked","e","values","checkHandler","editItem","find","editHandler","deleteHandler","addHandler","toLocaleTimeString","toLocaleDateString","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5c6b3577.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n// import Status from \"./Status\";\n\nexport default function App() {\n  const [lists, setLists] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const [filterOption, setFilterOption] = useState(\"all\");\n  const [isEdit, setIsEdit] = useState(false);\n  const [isSearch, setIsSearch] = useState(false);\n  const [isAdd, setIsAdd] = useState(false);\n  const [isEditId, setEditId] = useState(\"\");\n  const [addIndex, setAddIndex] = useState(0);\n\n  //input changing\n  const changeInputHandler = (event) => {\n    setInput(event.target.value);\n  };\n\n  //submit button handler\n  const submitHandler = (input) => {\n    if (!input) {\n      //no input in the box\n      return;\n    } else if (input && isEdit) {\n      //edit button\n      setIsEdit(false);\n      setLists(\n        lists.map((item) => {\n          if (item.id === isEditId) {\n            return { ...item, task: input, time: new Date() };\n          }\n          return item;\n        })\n      );\n      setInput(\"\");\n    } else if (input && isAdd) {\n      //add if add button is true\n      const addArray = [...lists];\n      addArray.splice(addIndex + 1, 0, {\n        id: new Date().getTime().toString(),\n        task: input\n      });\n      setIsAdd(false);\n      setLists(addArray);\n      setInput(\"\");\n    } else {\n      //submit input\n      const newTask = {\n        id: uuidv4(),\n        time: new Date(),\n        task: input,\n        status: false\n      };\n      setLists([...lists, newTask]);\n      setInput(\"\");\n    }\n  };\n\n  //delete current task\n  const deleteHandler = (id) => {\n    setLists(lists.filter((item) => item.id !== id));\n  };\n\n  //handel checkbox\n  const checkHandler = (event, id, index) => {\n    const values = [...lists];\n    values[index].status = event.target.checked;\n    setLists(values);\n  };\n\n  //set dropdown list value\n  const filterHandler = (event) => {\n    // const newValue = event.target.value;\n    setFilterOption(event.target.value);\n  };\n\n  //sort by date and title\n  const sortHandler = (event) => {\n    const newArray = [...lists];\n    if (event.target.value === \"date\") {\n      newArray.sort((a, b) => {\n        return a.time - b.time;\n      });\n    } else if (event.target.value === \"title\") {\n      newArray.sort((a, b) => {\n        return a.task - b.task;\n      });\n    }\n    setLists(newArray);\n  };\n\n  //serach by keyword\n  const searchHandler = () => {\n    setIsSearch(true);\n  };\n\n  //edit current task\n  const editHandler = (id) => {\n    setIsEdit(true);\n    const editItem = lists.find((item) => item.id === id);\n    setEditId(id);\n    setInput(editItem.task);\n  };\n\n  //add after function\n  const addHandler = (index) => {\n    setIsAdd(true);\n    setAddIndex(index);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Todo List</h1>\n      <div>\n        <label>Filter: </label>\n        <select value={filterOption} onChange={filterHandler}>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"complete\">Complete</option>\n        </select>\n        <label> Sort By: </label>\n        <select onChange={sortHandler}>\n          <option value=\"all\"></option>\n          <option value=\"date\">Date</option>\n          <option value=\"title\">Title</option>\n        </select>\n        <p>Total {lists.length} of Tasks</p>\n      </div>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder={isAdd ? \"Insert after current task\" : \"Add your To-Do\"}\n          value={input}\n          onChange={changeInputHandler}\n        ></input>\n        <button type=\"submit\" onClick={() => submitHandler(input)}>\n          {isEdit ? \"Edit\" : \"Submit\"}\n        </button>\n        <button type=\"button\" onClick={searchHandler}>\n          Search\n        </button>\n      </div>\n\n      <div>\n        {lists\n          .filter((item) => {\n            if (filterOption === \"active\") {\n              if (item.status === false) {\n                return true;\n              }\n              return false;\n            } else if (filterOption === \"complete\") {\n              if (item.status === true) {\n                return true;\n              }\n              return false;\n            } else if (isSearch) {\n              return item.task.includes(input);\n            } else {\n              return true;\n            }\n          })\n          .map((item, index) => {\n            const { id, time, task, status } = item;\n            return (\n              <div key={id}>\n                <input\n                  type=\"checkbox\"\n                  checked={status}\n                  onChange={(e) => checkHandler(e, id, index)}\n                />\n                {task}\n                <button onClick={() => editHandler(id)}>Edit</button>\n                <button onClick={() => deleteHandler(id)}>Delete</button>\n                <button onClick={() => addHandler(index)}> + </button>\n                <p>\n                  {time.toLocaleTimeString()}, {time.toLocaleDateString()}\n                </p>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}